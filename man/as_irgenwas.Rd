% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_numeric.R
\name{as_irgenwas}
\alias{as_irgenwas}
\alias{as_numeric}
\alias{as_numeric.numeric}
\alias{as_numeric.character}
\alias{as_numeric.factor}
\alias{as_logical}
\title{as_numeric and as_logical}
\usage{
as_numeric(x, ...)

\method{as_numeric}{numeric}(x, ...)

\method{as_numeric}{character}(x, na.string = "", dec = c(".", ","), trim_ws = TRUE, ...)

\method{as_numeric}{factor}(x, na.string = "", dec = c(".", ","), ...)

as_logical(x)
}
\arguments{
\item{x}{vector}

\item{...}{readr::parse_number trim_ws
Should leading and trailing whitespace (ASCII spaces and tabs) be trimmed from each field before parsing it?}

\item{na.string}{missing}

\item{dec}{decimal}

\item{trim_ws}{logical trim ws}
}
\value{
vector
}
\description{
as_numeric: character, factor to numeric

as_numeric: beim Type character wird die Funktion readr::parse_number ausgef√ºhrt.
parse_number(x, na = c(".", ","), trim_ws=TRUE)

as_numeric: beim Type factor wird zu erst versucht aus den labels  die Zahlen zu extrahieren 
und erst wenn das nicht geht die levels (1:n).

as_logical: alles mit zwei Merkmalen zu logical
}
\examples{

dummy <- factor(c("3", "4", "6"))
as_numeric(dummy)

 x <-
c(
  "> 15100",
  "+1",
  "-1",
  "655.39554148943",
  "699.913201822519 ",
  " 228.40319734460499",
  "",
  NA,
  "hallo1",
  "-77"
)
as_numeric(x,  na.string = c("", "-77"))
}
