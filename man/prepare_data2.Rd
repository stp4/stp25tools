% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prepare_data2.R
\name{prepare_data2}
\alias{prepare_data2}
\alias{prepare_data2.formula}
\alias{prepare_data2.data.frame}
\alias{which_test}
\alias{makeNamesNum}
\alias{make_formula}
\alias{clean_dots_formula}
\alias{print.stp25data}
\title{prepare_data2}
\usage{
prepare_data2(...)

\method{prepare_data2}{formula}(
  x,
  data,
  groups = NULL,
  na.action = na.pass,
  drop.unused.levels = FALSE,
  ...
)

\method{prepare_data2}{data.frame}(
  data,
  ...,
  by = "1",
  groups = NULL,
  na.action = na.pass,
  drop.unused.levels = FALSE
)

which_test(
  measure,
  group.class = NULL,
  measure.test = NULL,
  catTest = c("factor", "freq", "logical", "multi", "ratio"),
  conTest = c("numeric", "integer", "mean", "median")
)

makeNamesNum(measure, data, meAsNum = grepl("^[[:digit:]]", measure))

make_formula(measurevar, groupvars = NULL)

clean_dots_formula(x, data = NULL, names_data = names(data))

\method{print}{stp25data}(x, ...)
}
\arguments{
\item{...}{Namen oder Nummern (y-Variablen))}

\item{x}{formel}

\item{data}{data.frame}

\item{groups}{condition}

\item{na.action}{na.pass, na.omit}

\item{drop.unused.levels}{an factor}

\item{by}{x-Variablen}

\item{measure, group.class, measure.test, catTest, conTest, names_data}{helpers do not change}

\item{meAsNum}{logical welche sind Zahlen}

\item{measurevar, groupvars}{mamen als strings}
}
\value{
Liste mit Namen und Daten
data,
measure.vars ,
group.vars,
condition.vars,
formula,
by,
measure,
row_name,
col_name,
measure.class,
group.class,
condition.class,
digits
}
\description{
This function is used to prepare the data. The return value is a list with all the information for the automatic calculation of the descriptive statistics. The data is returned as tibble::as_tibble() and contains information about the scale properties and the number of decimal places for formatting. The labels are also returned.

makeNamesNum: aus Nummern die Namen extrahieren

make_formula: Formel erstellen in \code{berechne_all(...)} verwendet. 
Hier wird \code{cbind(a,b,c)~g} ausgegebeb.

clean_dots_formula: Formel bereinigen
return: clean_dots_formula: formula - Objekt
}
\examples{

dat<- data.frame(sex=1:2, m1=1:2,m2=1:2, m3=1:2, m4=1:2, m5=1:2, m6=1:2, geschl=1:2)

prepare_data2(~ m1 + m1 + m2 + m3 + m4, dat)
prepare_data2(~ log(m1) + m2 + m3 + m4, dat)
prepare_data2(~ m1[1] + m2 + m3 + m4, dat)
prepare_data2(~ m1[1] + m2 + m3[4,median] + m4, dat)
prepare_data2(dat, m1, m2, m3, m4)
prepare_data2(dat, 4:7)
prepare_data2(dat, m1[1], m2, m3, m4)
prepare_data2(dat, m1[1], m2, m3[4,median], m4)
prepare_data2(dat, m1, m2, m3, m4, by = ~ geschl)
prepare_data2(dat, m1[4, median], m2, m3, m4[5], by =  ~ geschl)
prepare_data2(dat, 1,2,6)


\dontrun{
which_test( "factor", NULL)
which_test( "factor", "logical")
which_test( "numeric", "factor")

which_test(c("median", "mean", "logical", "numeric", "multi"),
"factor",
c(NA, "ttest", NA, NA, NA))

c(
  median = "contest" ,
  mean = "ttest",
  logical = "cattest" ,
  numeric = "contest" ,
  multi = "notest"
)
}

 # measure <- c("geschl", "1" , "3:5", 1)
 # stp25tools:::makeNamesNum(measure,  data=dat)
 

\dontrun{
make_formula("a", "b")
make_formula("a", c("b","c"))
make_formula("a", ~b+c)
make_formula(c("a", "d"), c("b","c"))
}

\dontrun{
data <- data.frame(x = NA, y = NA, z = NA)
stp25tools:::clean_dots_formula(x ~ y, data)
stp25tools:::clean_dots_formula(. ~ x + y, data)
stp25tools:::clean_dots_formula(x + y ~ ., data)
stp25tools:::clean_dots_formula(~., data)
stp25tools:::formula_split(a+b~x|y)
}

}
