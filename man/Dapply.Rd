% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pivot-dapply.R, R/pivot-transpose.R
\name{Dapply}
\alias{Dapply}
\alias{Dapply.formula}
\alias{Dapply.data.frame}
\alias{dapply2}
\alias{scale_by}
\alias{transpose2}
\alias{transpose2.default}
\alias{transpose2.tbl_df}
\alias{transpose2.data.frame}
\alias{transpose_factor}
\title{Apply Functions Over Data Frames}
\usage{
Dapply(x, ...)

\method{Dapply}{formula}(x, data, fun = function(y) as.numeric(y), stringsAsFactors = FALSE, ...)

\method{Dapply}{data.frame}(x, ..., fun = function(y) as.numeric(y), stringsAsFactors = FALSE)

dapply2(x, fun = function(x) as.numeric(x), stringsAsFactors = FALSE, ...)

scale_by(x, ..., by = NULL, scale = 0.5, reference = 1, digits = 3)

transpose2(x, ...)

\method{transpose2}{default}(x, ...)

\method{transpose2}{tbl_df}(x, ...)

\method{transpose2}{data.frame}(x, ...)

transpose_factor(x, levels = names(x))
}
\arguments{
\item{x}{data.frame}

\item{...}{key="Item"}

\item{data}{Data.frame}

\item{fun}{funktion function(x) as.numeric(x)}

\item{stringsAsFactors}{logical: should character vectors be converted to factors?}

\item{by}{data.frame, measure and by}

\item{scale}{default = 1/2 (aproximativ range between -1 and +1)}

\item{reference}{for factor which level devault = 1}

\item{digits}{digits}

\item{levels}{optional Levels}
}
\value{
data.frame

same as x

gleiches Objekt

data.frame
}
\description{
Dapply, dapply2:  plyr::llply() + Label()

dapply2: Copie of plyr::llply()

Scaling and Centering of data.frame

transpose2: Data Frame Transpose

Alternative: data.table::transpose(l, make.names = 1, keep.names = "Item")

transpose_factor: Rangreihe transortieren
}
\examples{
 
df1 <- Label(data.frame(
  month = rep(1:3, 2),
  student = rep(c("Amy", "Bob"), each = 3),
  A = c(9, 7, 6, 8, 6, 9),
  B = c(6, 7, 8, 5, 6, 7)
),
A = "Deutsch",
B = "Mathe")

rs1 <- Dapply(~ A + B,
              df1,
              cut,
              breaks = 3,
              labels = c(1:3))
              

#' set.seed(1)
dat <- data.frame(
  x = round(c(rnorm(5), rnorm(5, 10, 2)), 1),
  y = c(12, 13, 10, 14, 10, 26, 25, 31, 28, 20) ,
  g =  factor(c(TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE), c(TRUE, FALSE))
)


dat |>
  scale_by(x, by = ~ g, scale = 1)  #|>  Tbll_desc(x, y, by =  ~ g)


transpose2(data.frame(pos = c("A", "B"), x = 1:2))

transpose2(data.frame(
  pos = c("A", "B" , "C"),
  x = 1:3,
  y = 3:5
))

   dat <-   data.frame(
  hoch = factor(c("A", "A", "A", "C", "C", "A"),   c("A", "B", "C", "D")),
  mittel = factor(c("B", "B", "B", "A", "B", "D"),   c("A", "B", "C", "D")),
  gering = factor(c("C", "C", "C", "B", "A", "B"),   c("A", "B", "C", "D"))
  )
  transpose_factor(dat, NULL)
  transpose_factor(dat)
#'

   dat <-   data.frame(
  hoch = factor(c("A", "A", "A", "C", "C", "A"),   c("A", "B", "C", "D")),
  mittel = factor(c("B", "B", "B", "A", "B", "D"),   c("A", "B", "C", "D")),
  gering = factor(c("C", "C", "C", "B", "A", "B"),   c("A", "B", "C", "D"))
  )
  transpose_factor(dat, NULL)
  transpose_factor(dat)
}
